// آدرس فایل Google Sheets شما
const SPREADSHEET_URL = "https://docs.google.com/spreadsheets/";
const ss = SpreadsheetApp.openByUrl(SPREADSHEET_URL);

// تعریف برگه‌ها
const usersSheet = ss.getSheetByName("Users");
const attendanceSheet = ss.getSheetByName("Attendance");
const settingsSheet = ss.getSheetByName("Settings");
const sessionsSheet = ss.getSheetByName("Sessions");
const actionLogSheet = ss.getSheetByName("ActionLog");
const loginLogSheet = ss.getSheetByName("LoginLog");

// --- توابع کمکی تاریخ شمسی ---
function getShamsiTimestamp() { const options = { timeZone: 'Asia/Tehran', year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false }; return new Date().toLocaleString('fa-IR', options); }
function getShamsiDateOnly() { const options = { timeZone: 'Asia/Tehran', year: 'numeric', month: '2-digit', day: '2-digit' }; return new Date().toLocaleDateString('fa-IR', options); }

// --- توابع کمکی برای گرفتن نام از روی شناسه ---
function getInstitutionNameById(institutionId) { if (institutionId == 0) return "ادمین سیستم"; const usersData = usersSheet.getDataRange().getValues(); const user = usersData.find(row => row[3] == institutionId); return user ? user[0] : `موسسه ناشناس`; }
function getMemberNameById(memberId, institutionId) { const memberSheet = ss.getSheetByName(`Members_${institutionId}`); if (!memberSheet) return `عضو ناشناس`; const membersData = memberSheet.getDataRange().getValues(); const member = membersData.find(row => row[0] == memberId); return member ? member[1] : `عضو ناشناس`; }

function doPost(e) { try { const request = JSON.parse(e.postData.contents); const action = request.action; if (action === 'login') { const result = checkLogin(request.payload); return ContentService.createTextOutput(JSON.stringify({ status: 'success', data: result })).setMimeType(ContentService.MimeType.JSON); } const token = request.token; const userData = validateToken(token); let result; switch (action) { case 'getMembers': result = getMembers(userData, request.payload); break; case 'saveAttendance': result = saveAttendance(userData, request.payload); break; case 'getAdminData': result = getAdminData(userData); break; case 'getTodaysAttendance': result = getTodaysAttendance(userData, request.payload); break; case 'getInstitutionHistory': result = getInstitutionHistory(userData, request.payload); break; case 'getDashboardStats': result = getDashboardStats(userData); break; case 'getMemberProfile': result = getMemberProfile(userData, request.payload); break; case 'getUserCredentials': result = getUserCredentials(userData, request.payload); break; case 'updateUserCredentials': result = updateUserCredentials(userData, request.payload); break; case 'getAllMembersForAdmin': result = getAllMembersForAdmin(userData, request.payload); break; case 'addMembersBatch': result = addMembersBatch(userData, request.payload); break; case 'deleteMember': result = deleteMember(userData, request.payload); break; case 'restoreMember': result = restoreMember(userData, request.payload); break; case 'updateMemberDetails': result = updateMemberDetails(userData, request.payload); break; case 'addInstitution': result = addInstitution(userData, request.payload); break; case 'archiveInstitution': result = archiveInstitution(userData, request.payload); break; case 'restoreInstitution': result = restoreInstitution(userData, request.payload); break; case 'getArchivedInstitutions': result = getArchivedInstitutions(userData); break; case 'getSettings': result = getSettings(userData); break; case 'updateSettings': result = updateSettings(userData, request.payload); break; case 'changeMyCredentials': result = changeMyCredentials(userData, request.payload); break; case 'getActionLog': result = getActionLog(userData); break; case 'getLoginLog': result = getLoginLog(userData); break; default: throw new Error("Action not supported: " + action); } return ContentService.createTextOutput(JSON.stringify({ status: 'success', data: result })).setMimeType(ContentService.MimeType.JSON); } catch (error) { console.error(error.stack); return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message })).setMimeType(ContentService.MimeType.JSON); } }

// --- توابع اصلی اصلاح شده ---

function getMembers(userData, payload) {
    const id = payload.institutionId || userData.institutionId;
    const memberSheet = ss.getSheetByName(`Members_${id}`);
    if (!memberSheet) { return []; }
    const membersData = memberSheet.getDataRange().getValues();
    const activeMembers = [];
    for(let i = 1; i < membersData.length; i++) {
        const row = membersData[i];
        if (row[3] === true) {
            activeMembers.push({ 
                memberId: row[0], 
                fullName: row[1],
                nationalId: row[4] || ''
            });
        }
    }
    return activeMembers;
}

function getInstitutionHistory(userData, payload) {
    const id = payload.institutionId || userData.institutionId;
    const allSheetData = attendanceSheet.getDataRange().getValues();
    const historyRecords = [];
    
    const memberSheet = ss.getSheetByName(`Members_${id}`);
    const membersMap = {};
    if(memberSheet){
      memberSheet.getDataRange().getValues().slice(1).forEach(row => {
        membersMap[row[0]] = { fullName: row[1], nationalId: row[4] || '' };
      });
    }

    for (let i = allSheetData.length - 1; i >= 1; i--) {
        const row = allSheetData[i];
        if (row[3] == id) {
            const memberInfo = membersMap[row[1]] || { fullName: `(شناسه: ${row[1]})`, nationalId: '' };
            historyRecords.push({
                date: row[0],
                memberId: row[1],
                status: row[2],
                fullName: memberInfo.fullName,
                nationalId: memberInfo.nationalId
            });
        }
    }
    return historyRecords;
}


// --- بقیه توابع کامل و صحیح ---
function validateToken(token) { if (!token) throw new Error("دسترسی غیرمجاز: توکن وجود ندارد."); const sessionsData = sessionsSheet.getDataRange().getValues(); const now = new Date().getTime(); for (let i = sessionsData.length - 1; i >= 1; i--) { const session = sessionsData[i]; if (session[1] === token) { const expiry = new Date(session[2]).getTime(); if (now > expiry) { sessionsSheet.deleteRow(i + 1); throw new Error("نشست شما منقضی شده است. لطفاً دوباره وارد شوید."); } const usersData = usersSheet.getDataRange().getValues(); for(let j = 1; j < usersData.length; j++){ if(usersData[j][0] === session[0]){ return { username: usersData[j][0], role: usersData[j][2], institutionId: usersData[j][3] }; } } } } throw new Error("دسترسی غیرمجاز: توکن نامعتبر است."); }
function isAdmin(userData) { if (userData.role !== 'admin') { throw new Error("دسترسی غیرمجاز. این عمل فقط برای مدیر امکان‌پذیر است."); } }
function checkMemberManagementPermission(userData) { const settings = getSettings(); const isAllowed = (userData.role === 'admin') || (userData.role === 'institute' && settings.allowMemberManagement === true); if (!isAllowed) { throw new Error("شما اجازه انجام این عملیات را ندارید."); } }
function logAction(actorUsername, actorRole, actionType, description) { actionLogSheet.appendRow([getShamsiTimestamp(), actorUsername, actorRole, actionType, description]); }
function getActionLog(userData) { isAdmin(userData); const data = actionLogSheet.getDataRange().getValues(); if (data.length < 2) return []; return data.slice(1).reverse().map(row => ({ timestamp: row[0], actor: row[1], role: row[2], type: row[3], desc: row[4] })); }
function getLoginLog(userData) { isAdmin(userData); const data = loginLogSheet.getDataRange().getValues(); if (data.length < 2) return []; return data.slice(1).reverse().map(row => ({ timestamp: row[0], username: row[1], role: row[2] })); }
function checkLogin(payload) { const usersData = usersSheet.getDataRange().getValues(); for (let i = 1; i < usersData.length; i++) { const userRow = usersData[i]; if (userRow[0] === payload.username && userRow[1] == payload.password && userRow[4] === 'Active') { const token = Utilities.getUuid(); const expiry = new Date(new Date().getTime() + 8 * 60 * 60 * 1000); sessionsSheet.appendRow([payload.username, token, expiry]); loginLogSheet.appendRow([getShamsiTimestamp(), userRow[0], userRow[2]]); return { username: userRow[0], role: userRow[2], institutionId: userRow[3], token: token }; } } throw new Error("نام کاربری یا رمز عبور اشتباه است یا حساب شما غیرفعال شده است."); }
function saveAttendance(userData, payload) { const institutionId = userData.institutionId; const todayDate = getShamsiDateOnly(); const allSheetData = attendanceSheet.getDataRange().getValues(); const oldRecordsMap = {}; let recordsExisted = false; for (let i = 1; i < allSheetData.length; i++) { if (allSheetData[i][0].startsWith(todayDate) && allSheetData[i][3] == institutionId) { recordsExisted = true; oldRecordsMap[allSheetData[i][1]] = allSheetData[i][2]; } } for (let i = allSheetData.length - 1; i >= 1; i--) { if (allSheetData[i][0].startsWith(todayDate) && allSheetData[i][3] == institutionId) { attendanceSheet.deleteRow(i + 1); } } const memberSheet = ss.getSheetByName(`Members_${institutionId}`); const membersData = memberSheet.getDataRange().getValues().slice(1); const membersMap = membersData.reduce((map, row) => { map[row[0]] = row[1]; return map; }, {}); const newRecords = payload.data; const timestamp = getShamsiTimestamp(); const changes = []; newRecords.forEach(record => { attendanceSheet.appendRow([timestamp, record.memberId, record.status, institutionId]); const oldStatus = oldRecordsMap[record.memberId]; if (recordsExisted && oldStatus && oldStatus !== record.status) { changes.push(`وضعیت "${membersMap[record.memberId]}" از '${oldStatus}' به '${record.status}'`); } }); const actionType = recordsExisted ? 'به‌روزرسانی حضور و غیاب' : 'ثبت اولیه حضور و غیاب'; const description = changes.length > 0 ? changes.join(' | ') : `حضور و غیاب برای ${newRecords.length} نفر ثبت شد.`; logAction(userData.username, userData.role, actionType, description); return { message: "اطلاعات با موفقیت به‌روزرسانی شد." }; }
function addInstitution(userData, payload) { isAdmin(userData); const { username, password } = payload; const usersData = usersSheet.getDataRange().getValues(); const userExists = usersData.slice(1).some(row => row[0] === username); if (userExists) { throw new Error("این نام کاربری قبلاً استفاده شده است."); } const maxId = Math.max(...usersData.slice(1).map(row => parseInt(row[3]) || 0)); const newId = maxId + 1; const creationDate = getShamsiDateOnly(); usersSheet.appendRow([username, password, 'institute', newId, 'Active', creationDate, userData.username, '', '']); const newSheet = ss.insertSheet(`Members_${newId}`); newSheet.getRange('A1:F1').setValues([['MemberID', 'FullName', 'CreationDate', 'IsActive', 'NationalID', 'Mobile']]); logAction(userData.username, userData.role, 'افزودن موسسه', `موسسه جدید "${username} (ID: ${newId})" ایجاد شد.`); return { message: `موسسه '${username}' با موفقیت ایجاد شد.` }; }
function archiveInstitution(userData, payload) { isAdmin(userData); const { institutionId } = payload; const instName = getInstitutionNameById(institutionId); logAction(userData.username, userData.role, 'آرشیو موسسه', `موسسه "${instName} (ID: ${institutionId})" آرشیو شد.`); const usersData = usersSheet.getDataRange().getValues(); const archiveDate = getShamsiTimestamp(); for (let i = 1; i < usersData.length; i++) { if (usersData[i][3] == institutionId) { const rowIndex = i + 1; usersSheet.getRange(rowIndex, 5).setValue('Archived'); usersSheet.getRange(rowIndex, 8).setValue(archiveDate); usersSheet.getRange(rowIndex, 9).setValue(userData.username); return { message: "موسسه با موفقیت آرشیو شد." }; } } throw new Error("موسسه مورد نظر یافت نشد."); }
function addMembersBatch(userData, payload) { checkMemberManagementPermission(userData); const { institutionId, namesString, idsString, mobilesString } = payload; const instName = getInstitutionNameById(institutionId); const names = namesString.split('\n').map(name => name.trim()).filter(name => name); logAction(userData.username, userData.role, 'افزودن عضو دسته‌جمعی', `اعضای جدید "${names.join(', ')}" به موسسه "${instName} (ID: ${institutionId})" اضافه شدند.`); const memberSheet = ss.getSheetByName(`Members_${institutionId}`); if (!memberSheet) { throw new Error("موسسه مورد نظر یافت نشد."); } const ids = idsString.split('\n').map(id => id.trim()); const mobiles = mobilesString.split('\n').map(mobile => mobile.trim()); if (names.length === 0) { throw new Error("لیست نام‌ها خالی است."); } const data = memberSheet.getDataRange().getValues(); let lastId = (institutionId * 1000); if (data.length > 1) { const maxId = Math.max(...data.slice(1).map(row => parseInt(row[0]) || 0)); if (maxId > lastId) { lastId = maxId; } } const creationDate = getShamsiDateOnly(); const newRows = []; for(let i=0; i < names.length; i++) { if(names[i]){ lastId++; newRows.push([lastId, names[i], creationDate, true, ids[i] || '', mobiles[i] || '']); } } if (newRows.length > 0) { memberSheet.getRange(memberSheet.getLastRow() + 1, 1, newRows.length, 6).setValues(newRows); } return { message: `${newRows.length} عضو جدید با موفقیت اضافه شدند.` }; }
function getSettings() { const settingsData = settingsSheet.getDataRange().getValues(); const settings = {}; for (let i = 1; i < settingsData.length; i++) { settings[settingsData[i][0]] = settingsData[i][1]; } return settings; }
function updateSettings(userData, payload) { isAdmin(userData); const oldSettings = getSettings(); const changes = []; Object.keys(payload).forEach(key => { if (oldSettings[key] !== payload[key]) { changes.push(`تنظیم "${key}" از '${oldSettings[key]}' به '${payload[key]}' تغییر کرد`); } }); if (changes.length > 0) { logAction(userData.username, userData.role, 'تغییر تنظیمات', changes.join(' | ')); } const settingsData = settingsSheet.getDataRange().getValues(); for (let i = 1; i < settingsData.length; i++) { const settingName = settingsData[i][0]; if (payload[settingName] !== undefined) { settingsSheet.getRange(i + 1, 2).setValue(payload[settingName]); } } return { message: "تنظیمات با موفقیت ذخیره شد." }; }
function changeMyCredentials(userData, payload) { const { newUsername, newPassword } = payload; const institutionId = userData.institutionId; const settings = getSettings(); let changes = []; if (newUsername && newUsername.trim() !== '' && newUsername.trim() !== userData.username) changes.push(`نام کاربری از '${userData.username}' به '${newUsername}'`); if (newPassword && newPassword.trim() !== '') changes.push('رمز عبور تغییر کرد'); if (changes.length > 0) logAction(userData.username, userData.role, 'تغییر اطلاعات ورود', changes.join(' | ')); const usersData = usersSheet.getDataRange().getValues(); for (let i = 1; i < usersData.length; i++) { if (usersData[i][3] == institutionId) { const rowIndex = i + 1; if (newUsername && newUsername.trim() !== '') { if (settings.allowUsernameChange !== true) { throw new Error("شما اجازه تغییر نام کاربری را ندارید."); } usersSheet.getRange(rowIndex, 1).setValue(newUsername); } if (newPassword && newPassword.trim() !== '') { if (settings.allowPasswordChange !== true) { throw new Error("شما اجازه تغییر رمز عبور را ندارید."); } usersSheet.getRange(rowIndex, 2).setValue(newPassword); } return { message: "اطلاعات شما با موفقیت به‌روزرسانی شد." }; } } throw new Error("کاربر یافت نشد."); }
function restoreInstitution(userData, payload) { isAdmin(userData); const { institutionId } = payload; const instName = getInstitutionNameById(institutionId); logAction(userData.username, userData.role, 'بازگردانی موسسه', `موسسه "${instName} (ID: ${institutionId})" بازگردانی شد.`); const usersData = usersSheet.getDataRange().getValues(); for (let i = 1; i < usersData.length; i++) { if (usersData[i][3] == institutionId) { const rowIndex = i + 1; usersSheet.getRange(rowIndex, 5).setValue('Active'); usersSheet.getRange(rowIndex, 8).setValue(''); usersSheet.getRange(rowIndex, 9).setValue(''); return { message: "موسسه با موفقیت بازگردانی شد." }; } } throw new Error("موسسه مورد نظر یافت نشد."); }
function getArchivedInstitutions(userData) { isAdmin(userData); const usersData = usersSheet.getDataRange().getValues().slice(1); const archived = usersData.filter(user => user[4] === 'Archived'); return archived.map(user => ({ username: user[0], institutionId: user[3], creationDate: user[5], createdBy: user[6], archiveDate: user[7], archivedBy: user[8] })); }
function getAllMembersForAdmin(userData, payload) { checkMemberManagementPermission(userData); const institutionId = payload.institutionId; const memberSheet = ss.getSheetByName(`Members_${institutionId}`); if (!memberSheet) { throw new Error("موسسه مورد نظر یافت نشد."); } const membersData = memberSheet.getDataRange().getValues(); if (membersData.length < 2) return []; return membersData.slice(1).map(row => ({ memberId: row[0], fullName: row[1], creationDate: row[2] || '', isActive: row[3], nationalId: row[4] || '', mobile: row[5] || '' })); }
function deleteMember(userData, payload) { checkMemberManagementPermission(userData); const { institutionId, memberId } = payload; const instName = getInstitutionNameById(institutionId); const memberName = getMemberNameById(memberId, institutionId); logAction(userData.username, userData.role, 'حذف عضو', `عضو "${memberName} (ID: ${memberId})" از موسسه "${instName} (ID: ${institutionId})" حذف (غیرفعال) شد.`); const memberSheet = ss.getSheetByName(`Members_${institutionId}`); if (!memberSheet) { throw new Error("موسسه مورد نظر یافت نشد."); } const data = memberSheet.getDataRange().getValues(); for (let i = 1; i < data.length; i++) { if (data[i][0] == memberId) { memberSheet.getRange(i + 1, 4).setValue(false); return { message: "عضو با موفقیت حذف (غیرفعال) شد." }; } } throw new Error("عضو مورد نظر یافت نشد."); }
function restoreMember(userData, payload) { checkMemberManagementPermission(userData); const { institutionId, memberId } = payload; const instName = getInstitutionNameById(institutionId); const memberName = getMemberNameById(memberId, institutionId); logAction(userData.username, userData.role, 'بازگردانی عضو', `عضو "${memberName} (ID: ${memberId})" از موسسه "${instName} (ID: ${institutionId})" بازگردانی شد.`); const memberSheet = ss.getSheetByName(`Members_${institutionId}`); if (!memberSheet) { throw new Error("موسسه مورد نظر یافت نشد."); } const data = memberSheet.getDataRange().getValues(); for (let i = 1; i < data.length; i++) { if (data[i][0] == memberId) { memberSheet.getRange(i + 1, 4).setValue(true); return { message: "عضو با موفقیت بازگردانی شد." }; } } throw new Error("عضو مورد نظر یافت نشد."); }
function updateMemberDetails(userData, payload) { checkMemberManagementPermission(userData); const { institutionId, memberId } = payload; const instName = getInstitutionNameById(institutionId); const memberName = getMemberNameById(memberId, institutionId); logAction(userData.username, userData.role, 'ویرایش عضو', `اطلاعات عضو "${memberName} (ID: ${memberId})" از موسسه "${instName} (ID: ${institutionId})" ویرایش شد.`); const memberSheet = ss.getSheetByName(`Members_${institutionId}`); if (!memberSheet) { throw new Error("موسسه مورد نظر یافت نشد."); } const data = memberSheet.getDataRange().getValues(); for (let i = 1; i < data.length; i++) { if (data[i][0] == memberId) { const rowIndex = i + 1; memberSheet.getRange(rowIndex, 2).setValue(payload.fullName); memberSheet.getRange(rowIndex, 5).setValue(payload.nationalId); memberSheet.getRange(rowIndex, 6).setValue(payload.mobile); return { message: "اطلاعات عضو با موفقیت به‌روزرسانی شد." }; } } throw new Error("عضو مورد نظر یافت نشد."); }
function getAdminData(userData) { isAdmin(userData); const data = attendanceSheet.getDataRange().getValues(); if (data.length < 2) return []; return data.slice(1).map(row => ({ date: row[0], memberId: row[1], status: row[2], institutionId: row[3] })); }
function getTodaysAttendance(userData, payload) { const id = payload.institutionId || userData.institutionId; const todayDate = getShamsiDateOnly(); const allSheetData = attendanceSheet.getDataRange().getValues(); const todaysRecords = []; for (let i = 1; i < allSheetData.length; i++) { if (allSheetData[i][0].startsWith(todayDate) && allSheetData[i][3] == id) { todaysRecords.push({ memberId: allSheetData[i][1], status: allSheetData[i][2] }); } } return todaysRecords; }
function getDashboardStats(userData) { isAdmin(userData); const usersData = usersSheet.getDataRange().getValues().slice(1); const attendanceData = attendanceSheet.getDataRange().getValues().slice(1); const stats = []; const institutions = usersData.filter(user => user[2] === 'institute' && user[4] === 'Active'); institutions.forEach(inst => { const instId = inst[3]; const instUsername = inst[0]; const memberSheet = ss.getSheetByName(`Members_${instId}`); const memberCount = memberSheet ? memberSheet.getDataRange().getValues().slice(1).filter(r => r[3] === true).length : 0; let lastTimestamp = null; let lastDateForStats = ''; let presentCount = 0; let absentCount = 0; const instRecords = attendanceSheet.getDataRange().getValues().slice(1).filter(row => row[3] == instId); if (instRecords.length > 0) { lastTimestamp = instRecords[instRecords.length - 1][0]; lastDateForStats = lastTimestamp.split(/,|،/)[0].trim(); instRecords.forEach(row => { if (row[0].startsWith(lastDateForStats)) { if (row[2] === 'حاضر') presentCount++; else if (row[2] === 'غایب') absentCount++; } }); } stats.push({ id: instId, name: instUsername, memberCount: memberCount, lastUpdate: lastTimestamp || 'بدون سابقه', present: presentCount, absent: absentCount }); }); return stats; }
function getMemberProfile(userData, payload) { const { memberId } = payload; const allAttendance = attendanceSheet.getDataRange().getValues().slice(1); let creationDate = 'ثبت نشده'; let nationalId = 'ثبت نشده'; let mobile = 'ثبت نشده'; const users = usersSheet.getDataRange().getValues().slice(1); for (const user of users) { if (user[2] === 'institute') { const memberSheet = ss.getSheetByName(`Members_${user[3]}`); if (memberSheet) { const membersData = memberSheet.getDataRange().getValues().slice(1); const memberRow = membersData.find(row => row[0] == memberId); if (memberRow) { creationDate = memberRow[2] || 'ثبت نشده'; nationalId = memberRow[4] || 'ثبت نشده'; mobile = memberRow[5] || 'ثبت نشده'; break; } } } } const memberRecords = allAttendance.filter(row => row[1] == memberId); const presents = memberRecords.filter(row => row[2] === 'حاضر'); const absents = memberRecords.filter(row => row[2] === 'غایب'); const lastPresent = presents.length > 0 ? presents[presents.length - 1][0] : 'سابقه‌ای یافت نشد'; const lastAbsent = absents.length > 0 ? absents[absents.length - 1][0] : 'سابقه‌ای یافت نشد'; return { creationDate: creationDate, nationalId: nationalId, mobile: mobile, totalPresents: presents.length, totalAbsents: absents.length, lastPresent: lastPresent, lastAbsent: lastAbsent }; }
function getUserCredentials(userData, payload) { isAdmin(userData); const { institutionId } = payload; const usersData = usersSheet.getDataRange().getValues(); for (let i = 1; i < usersData.length; i++) { if (usersData[i][3] == institutionId) { return { username: usersData[i][0] }; } } throw new Error("کاربر یافت نشد."); }
function updateUserCredentials(userData, payload) { isAdmin(userData); const { institutionId, newUsername, newPassword } = payload; const instName = getInstitutionNameById(institutionId); let changes = []; if(newUsername && newUsername.trim() !== '' && newUsername.trim() !== instName) changes.push(`نام کاربری از '${instName}' به '${newUsername}'`); if(newPassword && newPassword.trim() !== '') changes.push('رمز عبور تغییر کرد'); if(changes.length > 0) logAction(userData.username, userData.role, 'ویرایش اطلاعات کاربر', `${changes.join(' و ')} برای موسسه "${instName} (ID: ${institutionId})"`); const usersData = usersSheet.getDataRange().getValues(); for (let i = 1; i < usersData.length; i++) { if (usersData[i][3] == institutionId) { const rowIndex = i + 1; if (newUsername && newUsername.trim() !== '') { usersSheet.getRange(rowIndex, 1).setValue(newUsername); } if (newPassword && newPassword.trim() !== '') { usersSheet.getRange(rowIndex, 2).setValue(newPassword); } return { message: "اطلاعات با موفقیت به‌روزرسانی شد." }; } } throw new Error("کاربر یافت نشد."); }
